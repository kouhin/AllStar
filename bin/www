#!/usr/bin/env node
var debug = require('debug')('express');
var app = require('../app');
var io = require('socket.io');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

/**
 * application socket io
 */
var AllStar = require('../lib/AllStar');
var state = AllStar.state.init();
var socket = io.listen(server);
var token = 'kgsihpthjsdfiwojwpea:ofjdsj';
var masterKey = '*';

// set Bug
socket.on('connection', function (client) {
  'use strict';
  /**
   * clientId
   */
  var clientId = client.id;

  /**
   * get flow state
   */
  client
      .on('get:state', function () {
          var state = AllStar.state.get();
          AllStar.getData(state, function(err, data) {
              if(err) {
                  return console.log('Error: ', err, data);
              }
              return client.emit(state, data);
          });
      })

  /**
   * receive from master
   * proceed next flow
   */
      .on('next', function (data) {
          state = AllStar.state.next();
          AllStar.getData(state, function(err, data) {
              if(err) {
                  return console.log('Error: ', err, data);
              }
              var _state = state.split(':');

              // question count start
              if (_state[1] === 'start') {
                  AllStar.timer.start();
              }

              state = (_state[2]) ? _state[0] + ':' + _state[1] : state;

              // broadcast all connected
              socket.sockets.emit(state, data);
          });
      })

  /**
   * register
   */
      .on('register', function (data) {
          if (!data) {
              return;
          }
          AllStar.register(clientId, data, function (err, user) {
              if (err) {
                  if('invalid_id' == err) {
                      return client.emit(err);
                  } else {
                      return console.log('ERROR: ', err, user);
                  }
              }

              if (user) {
                  client.emit('registered', user);

                  AllStar.getRegistered(function (err, count) {
                      if (err) {
                          return console.log('ERROR: ', err, count);
                      }
                      socket.sockets.emit('register:member', {sum: count});
                  });
              }
          });
      })

  /**
   * getMasterToken with simple word check
   */
      .on('getMasterToken', function (key) {
        // var _token = (key === masterKey) ? token : null;
        client.emit('setMasterToken', 'aa');
      })

  /**
   * answer from client
   */
      .on('q:answer', function (data) {
        if (AllStar.timer.state === 'stop') {
          return;
        }

        AllStar.answer({
          _id: data._id,
          answer: data.answer,
          time: AllStar.timer.get()
        }, function(err, user) {
            //Empty
        });

      })

    // disconected
      .on('disconnect', function () {
        // noop
      });
});